function R(...i){if(i.length===1&&i[0]instanceof Uint8Array)return i[0];let e=i.reduce((n,a)=>n+a.length,0),t=new Uint8Array(e),r=0;for(let n of i)t.set(n,r),r+=n.length;return t}function X(i,e){let t=i.length;if(t!==e.length)return!1;for(let r=0;r<t;r++)if(i[r]!==e[r])return!1;return!0}var dt="\xB7\xB7 ";var Gt=new TextEncoder,Ae=new TextDecoder,b=class{offset;dataView;data;comments;indents;indent;constructor(e){this.offset=0,this.data=typeof e=="number"?new Uint8Array(e):e,this.dataView=new DataView(this.data.buffer,this.data.byteOffset,this.data.byteLength),this.comments={},this.indents={},this.indent=0}extend(e){let t=typeof e=="number"?new Uint8Array(e):e;this.data=R(this.data,t),this.dataView=new DataView(this.data.buffer,this.data.byteOffset,this.data.byteLength)}remaining(){return this.data.length-this.offset}subarray(e){return this.data.subarray(this.offset,this.offset+=e)}skip(e,t){return this.offset+=e,t&&this.comment(t),this}comment(e,t=this.offset){let r=this.comments[t],n=(r===void 0?"":r+" ")+e;return this.comments[t]=n,this}readBytes(e){return this.data.slice(this.offset,this.offset+=e)}readUTF8String(e){let t=this.subarray(e),r=Ae.decode(t);return this.comment('"'+r.replace(/\r/g,"\\r").replace(/\n/g,"\\n")+'"'),r}readUTF8StringNullTerminated(){let e=this.offset;for(;this.data[e]!==0;)e++;let t=this.readUTF8String(e-this.offset);return this.expectUint8(0,"end of string"),t}readUint8(e){let t=this.dataView.getUint8(this.offset);return this.offset+=1,e&&this.comment(e.replace(/%/g,String(t))),t}readUint16(e){let t=this.dataView.getUint16(this.offset);return this.offset+=2,e&&this.comment(e.replace(/%/g,String(t))),t}readUint24(e){let t=this.readUint8(),r=this.readUint16(),n=(t<<16)+r;return e&&this.comment(e.replace(/%/g,String(n))),n}readUint32(e){let t=this.dataView.getUint32(this.offset);return this.offset+=4,e&&this.comment(e.replace(/%/g,String(t))),t}expectBytes(e,t){let r=this.readBytes(e.length);if(t&&this.comment(t),!X(r,e))throw new Error("Unexpected bytes")}expectUint8(e,t){let r=this.readUint8();if(t&&this.comment(t),r!==e)throw new Error(`Expected ${e}, got ${r}`)}expectUint16(e,t){let r=this.readUint16();if(t&&this.comment(t),r!==e)throw new Error(`Expected ${e}, got ${r}`)}expectUint24(e,t){let r=this.readUint24();if(t&&this.comment(t),r!==e)throw new Error(`Expected ${e}, got ${r}`)}expectUint32(e,t){let r=this.readUint32();if(t&&this.comment(t),r!==e)throw new Error(`Expected ${e}, got ${r}`)}expectLength(e,t=1){let r=this.offset,n=r+e;if(n>this.data.length)throw new Error("Expected length exceeds remaining data length");return this.indent+=t,this.indents[r]=this.indent,[()=>{if(this.indent-=t,this.indents[this.offset]=this.indent,this.offset!==n)throw new Error(`${e} bytes expected but ${this.offset-r} read`)},()=>n-this.offset]}expectLengthUint8(e){let t=this.readUint8();return this.comment(`${t} bytes${e?` of ${e}`:""} follow`),this.expectLength(t)}expectLengthUint16(e){let t=this.readUint16();return this.comment(`${t} bytes${e?` of ${e}`:""} follow`),this.expectLength(t)}expectLengthUint24(e){let t=this.readUint24();return this.comment(`${t} bytes${e?` of ${e}`:""} follow`),this.expectLength(t)}expectLengthUint32(e){let t=this.readUint32();return this.comment(`${t} bytes${e?` of ${e}`:""} follow`),this.expectLength(t)}expectLengthUint8Incl(e){let t=this.readUint8();return this.comment(`${t} bytes${e?` of ${e}`:""} start here`),this.expectLength(t-1)}expectLengthUint16Incl(e){let t=this.readUint16();return this.comment(`${t} bytes${e?` of ${e}`:""} start here`),this.expectLength(t-2)}expectLengthUint24Incl(e){let t=this.readUint24();return this.comment(`${t} bytes${e?` of ${e}`:""} start here`),this.expectLength(t-3)}expectLengthUint32Incl(e){let t=this.readUint32();return this.comment(`${t} bytes${e?` of ${e}`:""} start here`),this.expectLength(t-4)}writeBytes(e){return this.data.set(e,this.offset),this.offset+=e.length,this}writeUTF8String(e){let t=Gt.encode(e);return this.writeBytes(t),this.comment('"'+e.replace(/\r/g,"\\r").replace(/\n/g,"\\n")+'"'),this}writeUTF8StringNullTerminated(e){let t=Gt.encode(e);return this.writeBytes(t),this.comment('"'+e.replace(/\r/g,"\\r").replace(/\n/g,"\\n")+'"'),this.writeUint8(0),this.comment("end of string"),this}writeUint8(e,t){return this.dataView.setUint8(this.offset,e),this.offset+=1,t&&this.comment(t),this}writeUint16(e,t){return this.dataView.setUint16(this.offset,e),this.offset+=2,t&&this.comment(t),this}writeUint24(e,t){return this.writeUint8((e&16711680)>>16),this.writeUint16(e&65535,t),this}writeUint32(e,t){return this.dataView.setUint32(this.offset,e),this.offset+=4,t&&this.comment(t),this}_writeLengthGeneric(e,t,r){let n=this.offset;this.offset+=e;let a=this.offset;return this.indent+=1,this.indents[a]=this.indent,()=>{let c=this.offset-(t?n:a);if(e===1)this.dataView.setUint8(n,c);else if(e===2)this.dataView.setUint16(n,c);else if(e===3)this.dataView.setUint8(n,(c&16711680)>>16),this.dataView.setUint16(n+1,c&65535);else if(e===4)this.dataView.setUint32(n,c);else throw new Error(`Invalid length for length field: ${e}`);this.comment(`${c} bytes${r?` of ${r}`:""} ${t?"start here":"follow"}`,a),this.indent-=1,this.indents[this.offset]=this.indent}}writeLengthUint8(e){return this._writeLengthGeneric(1,!1,e)}writeLengthUint16(e){return this._writeLengthGeneric(2,!1,e)}writeLengthUint24(e){return this._writeLengthGeneric(3,!1,e)}writeLengthUint32(e){return this._writeLengthGeneric(4,!1,e)}writeLengthUint8Incl(e){return this._writeLengthGeneric(1,!0,e)}writeLengthUint16Incl(e){return this._writeLengthGeneric(2,!0,e)}writeLengthUint24Incl(e){return this._writeLengthGeneric(3,!0,e)}writeLengthUint32Incl(e){return this._writeLengthGeneric(4,!0,e)}array(){return this.data.subarray(0,this.offset)}commentedString(e=!1){let t=this.indents[0]!==void 0?dt.repeat(this.indents[0]):"",r=this.indents[0]??0,n=e?this.data.length:this.offset;for(let a=0;a<n;a++){t+=this.data[a].toString(16).padStart(2,"0")+" ";let c=this.comments[a+1];this.indents[a+1]!==void 0&&(r=this.indents[a+1]),c&&(t+=` ${c}
${dt.repeat(r)}`)}return t}};var xe=new RegExp(`  .+|^(${dt})+`,"gm"),Se="color: #ddd",Ht="color: #111",Ue="color: #777";function C(i,e){let t=[Ht];return i="%c"+i.replace(xe,r=>(t.push(r.startsWith(dt)?Se:`color: ${e}`,Ht),`%c\u200B${r}\u200B%c`)),[i,...t]}function E(i){let e=[];return i=i.replace(/^[^:]+:.*$/gm,t=>{let r=t.indexOf(":");return e.push(Ue,Ht),`%c${t.slice(0,r+1)}%c${t.slice(r+1)}`}),[i,...e]}function mt(i,e=!0){let t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;"},r=/\bhttps?:[/][/][^\s\u200b"'<>)]+[^\s\u200b"'<>).,:;?!]\b/,n=new RegExp((e?`\\[[^\\]\\n]+\\]\\(${r.source}\\)|${r.source}|`:"")+"["+Object.keys(t).join("")+"]","gi");return i.replace(n,c=>{if(c.length===1)return t[c];let s,h;if(c.charAt(0)==="["){let d=c.indexOf("]");s=mt(c.substring(1,d),!1),h=mt(c.substring(d+2,c.length-1),!1)}else h=s=mt(c,!1);return`<a href="${h}" target="_blank">${s}</a>`})}function be(...i){let e="<span>",t,r,n="";for(;(t=i.shift())!==void 0;){t=n+mt(String(t)),n=" ";let a=/([\s\S]*?)%([csoOidf])|[\s\S]+/g;for(;(r=a.exec(t))!==null;){let[c,s,h]=r;h===void 0?e+=c:(e+=s,h==="c"?e+=`</span><span style="${i.shift()}">`:h==="s"?e+=mt(i.shift()):h==="o"||h==="O"?e+=JSON.stringify(i.shift(),void 0,h==="O"?2:void 0):(h==="i"||h==="d"||h==="f")&&(e+=String(i.shift())))}}return e+="</span>",e}var Ee=0;function o(...i){if(console.log(...i,`
`),typeof document>"u")return;let e=document.documentElement,t=e.scrollTop>=e.scrollHeight-e.clientHeight-1||e.clientHeight>=e.scrollHeight,r=document.querySelector("#logs");r.innerHTML+=`<label><input type="checkbox" name="c${Ee++}" checked="checked"><div class="section">`+be(...i)+"</div></label>",t&&window.scrollTo({top:99999,behavior:"auto"})}function Kt(i,e,t,r=!0){let n=new b(1024);n.writeUint8(22,"record type: handshake"),n.writeUint16(769,"TLS legacy record version 1.0 ([RFC8446 \xA75.1](https://datatracker.ietf.org/doc/html/rfc8446#section-5.1))");let a=n.writeLengthUint16();n.writeUint8(1,"handshake type: client hello");let c=n.writeLengthUint24();n.writeUint16(771,"TLS version 1.2 (middlebox compatibility: see [blog.cloudflare.com](https://blog.cloudflare.com/why-tls-1-3-isnt-in-browsers-yet))"),crypto.getRandomValues(n.subarray(32)),n.comment("client random");let s=n.writeLengthUint8("session ID");n.writeBytes(t),n.comment("session ID (middlebox compatibility again: [RFC8446 appendix D4](https://datatracker.ietf.org/doc/html/rfc8446#appendix-D.4))"),s();let h=n.writeLengthUint16("ciphers ([RFC8446 appendix B4](https://datatracker.ietf.org/doc/html/rfc8446#appendix-B.4))");n.writeUint16(4865,"cipher: TLS_AES_128_GCM_SHA256"),h();let d=n.writeLengthUint8("compression methods");n.writeUint8(0,"compression method: none"),d();let m=n.writeLengthUint16("extensions ([RFC8446 \xA74.2](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2))");if(r){n.writeUint16(0,"extension type: SNI ([RFC6066 \xA73](https://datatracker.ietf.org/doc/html/rfc6066#section-3))");let U=n.writeLengthUint16("SNI data"),_=n.writeLengthUint16("SNI records");n.writeUint8(0,"list entry type: DNS hostname");let $=n.writeLengthUint16("hostname");n.writeUTF8String(i),$(),_(),U()}n.writeUint16(11,"extension type: EC point formats (for middlebox compatibility, from TLS 1.2: [RFC8422 \xA75.1.2](https://datatracker.ietf.org/doc/html/rfc8422#section-5.1.2))");let l=n.writeLengthUint16("formats data"),g=n.writeLengthUint8("formats");n.writeUint8(0,"format: uncompressed"),g(),l(),n.writeUint16(10,"extension type: supported groups ([RFC8446 \xA74.2.7](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.7))");let y=n.writeLengthUint16("groups data"),S=n.writeLengthUint16("groups");n.writeUint16(23,"curve secp256r1"),S(),y(),n.writeUint16(13,"extension type: signature algorithms ([RFC8446 \xA74.2.3](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.3))");let T=n.writeLengthUint16("signature algorithms data"),A=n.writeLengthUint16("signature algorithms");n.writeUint16(1027,"ecdsa_secp256r1_sha256"),n.writeUint16(2052,"rsa_pss_rsae_sha256"),A(),T(),n.writeUint16(43,"extension type: supported TLS versions ([RFC8446 \xA74.2.1](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.1))");let x=n.writeLengthUint16("TLS versions data"),v=n.writeLengthUint8("TLS versions");n.writeUint16(772,"TLS version 1.3"),v(),x(),n.writeUint16(51,"extension type: key share ([RFC8446 \xA74.2.8](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.8))");let F=n.writeLengthUint16("key share data"),V=n.writeLengthUint16("key shares");n.writeUint16(23,"secp256r1 (NIST P-256) key share ([RFC8446 \xA74.2.7](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.7))");let G=n.writeLengthUint16("key share");return n.writeBytes(new Uint8Array(e)),n.comment("key"),G(),V(),F(),m(),c(),a(),n}function u(i,e=""){return[...i].map(t=>t.toString(16).padStart(2,"0")).join(e)}function Mt(i,e){let t,r,[n]=i.expectLength(i.remaining());i.expectUint8(2,"handshake type: server hello");let[a]=i.expectLengthUint24("server hello");i.expectUint16(771,"TLS version 1.2 (middlebox compatibility)");let c=i.readBytes(32);if(X(c,[207,33,173,116,229,154,97,17,190,29,140,2,30,101,184,145,194,162,17,22,122,187,140,94,7,158,9,226,200,168,51,156]))throw new Error("Unexpected HelloRetryRequest");i.comment('server random \u2014 [not SHA256("HelloRetryRequest")](https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.3)'),i.expectUint8(e.length,"session ID length (matches client session ID)"),i.expectBytes(e,"session ID (matches client session ID)"),i.expectUint16(4865,"cipher (matches client hello)"),i.expectUint8(0,"no compression");let[s,h]=i.expectLengthUint16("extensions");for(;h()>0;){let d=i.readUint16("extension type"),[m]=i.expectLengthUint16("extension");if(d===43)i.expectUint16(772,"TLS version 1.3"),r=!0;else if(d===51)i.expectUint16(23,"secp256r1 (NIST P-256) key share"),i.expectUint16(65),t=i.readBytes(65),i.comment("key");else throw new Error(`Unexpected extension 0x${u([d])}`);m()}if(s(),a(),n(),r!==!0)throw new Error("No TLS version provided");if(t===void 0)throw new Error("No key provided");return t}var Yt={20:"ChangeCipherSpec",21:"Alert",22:"Handshake",23:"Application",24:"Heartbeat"},ut=1<<14,Ce=ut+1+255;async function Ut(i,e,t=ut){let n=await i(5);if(n===void 0)return;if(n.length<5)throw new Error("TLS record header truncated");let a=new b(n),c=a.readUint8();if(c<20||c>24)throw new Error(`Illegal TLS record type 0x${c.toString(16)}`);if(e!==void 0&&c!==e)throw new Error(`Unexpected TLS record type 0x${c.toString(16).padStart(2,"0")} (expected 0x${e.toString(16).padStart(2,"0")})`);a.comment(`record type: ${Yt[c]}`),a.expectUint16(771,"TLS record version 1.2 (middlebox compatibility)");let s=a.readUint16("% bytes of TLS record follow");if(s>t)throw new Error(`Record too long: ${s} bytes`);let h=await i(s);if(h===void 0||h.length<s)throw new Error("TLS record content truncated");return{headerData:n,header:a,type:c,length:s,content:h}}async function bt(i,e,t){let r=await Ut(i,23,Ce);if(r===void 0)return;let n=new b(r.content),[a]=n.expectLength(n.remaining());n.skip(r.length-16,"encrypted payload"),n.skip(16,"auth tag"),a(),o(...C(r.header.commentedString()+n.commentedString(),"#88c"));let c=await e.process(r.content,16,r.headerData),s=c.length-1;for(;c[s]===0;)s-=1;if(s<0)throw new Error("Decrypted message has no record type indicator (all zeroes)");let h=c[s],d=c.subarray(0,s);if(h===21){let m=d.length===2&&d[0]===1&&d[1]===0;if(o(`%cTLS 0x15 alert record: ${u(d," ")}`+(m?" (close notify)":""),`color: ${"#c88"}`),m)return}if(h===22&&d[0]===4)return o(...C(u(d," ")+"  session ticket message: ignored","#88c")),bt(i,e,t);if(t!==void 0&&h!==t)throw new Error(`Unexpected TLS record type 0x${h.toString(16).padStart(2,"0")} (expected 0x${t.toString(16).padStart(2,"0")})`);return o("... decrypted payload (see below) ... %s%c  %s",h.toString(16).padStart(2,"0"),`color: ${"#88c"}`,`actual decrypted record type: ${Yt[h]}`),d}async function Te(i,e,t){let r=R(i,[t]),n=5,s=r.length+16,h=new b(n+s);h.writeUint8(23,"record type: Application (middlebox compatibility)"),h.writeUint16(771,"TLS version 1.2 (middlebox compatibility)"),h.writeUint16(s,`${s} bytes follow`);let[d]=h.expectLength(s),m=h.array(),l=await e.process(r,16,m);return h.writeBytes(l.subarray(0,l.length-16)),h.comment("encrypted data"),h.writeBytes(l.subarray(l.length-16)),h.comment("auth tag"),d(),o(...C(h.commentedString(),"#8cc")),h.array()}async function Ot(i,e,t){let r=Math.ceil(i.length/ut),n=[];for(let a=0;a<r;a++){let c=i.subarray(a*ut,(a+1)*ut),s=await Te(c,e,t);n.push(s)}return n}var f=crypto.subtle;var Wt=new TextEncoder;async function Et(i,e,t){let r=await f.importKey("raw",i,{name:"HMAC",hash:{name:`SHA-${t}`}},!1,["sign"]);var n=new Uint8Array(await f.sign("HMAC",r,e));return n}async function ve(i,e,t,r){let n=r>>3,a=Math.ceil(t/n),c=new Uint8Array(a*n),s=await f.importKey("raw",i,{name:"HMAC",hash:{name:`SHA-${r}`}},!1,["sign"]),h=new Uint8Array(0);for(let d=0;d<a;d++){let m=R(h,e,[d+1]),l=await f.sign("HMAC",s,m),g=new Uint8Array(l);c.set(g,n*d),h=g}return c.subarray(0,t)}var zt=Wt.encode("tls13 ");async function H(i,e,t,r,n){let a=Wt.encode(e),c=R([(r&65280)>>8,r&255],[zt.length+a.length],zt,a,[t.length],t);return ve(i,c,r,n)}async function Jt(i,e,t,r,n){let a=r>>>3,c=new Uint8Array(a),s=await f.importKey("raw",i,{name:"ECDH",namedCurve:"P-256"},!1,[]),h=await f.deriveBits({name:"ECDH",public:s},e,256),d=new Uint8Array(h);o(...E("shared secret: "+u(d)));let m=await f.digest("SHA-256",t),l=new Uint8Array(m);o(...E("hellos hash: "+u(l)));let g=await Et(new Uint8Array(1),c,r);o(...E("early secret: "+u(new Uint8Array(g))));let y=await f.digest(`SHA-${r}`,new Uint8Array(0)),S=new Uint8Array(y);o(...E("empty hash: "+u(S)));let T=await H(g,"derived",S,a,r);o(...E("derived secret: "+u(T)));let A=await Et(T,d,r);o(...E("handshake secret: "+u(A)));let x=await H(A,"c hs traffic",l,a,r);o(...E("client secret: "+u(x)));let v=await H(A,"s hs traffic",l,a,r);o(...E("server secret: "+u(v)));let F=await H(x,"key",new Uint8Array(0),n,r);o(...E("client handshake key: "+u(F)));let V=await H(v,"key",new Uint8Array(0),n,r);o(...E("server handshake key: "+u(V)));let G=await H(x,"iv",new Uint8Array(0),12,r);o(...E("client handshake iv: "+u(G)));let U=await H(v,"iv",new Uint8Array(0),12,r);return o(...E("server handshake iv: "+u(U))),{serverHandshakeKey:V,serverHandshakeIV:U,clientHandshakeKey:F,clientHandshakeIV:G,handshakeSecret:A,clientSecret:x,serverSecret:v}}async function Zt(i,e,t,r){let n=t>>>3,a=new Uint8Array(n),c=await f.digest(`SHA-${t}`,new Uint8Array(0)),s=new Uint8Array(c);o(...E("empty hash: "+u(s)));let h=await H(i,"derived",s,n,t);o(...E("derived secret: "+u(h)));let d=await Et(h,a,t);o(...E("master secret: "+u(d)));let m=await H(d,"c ap traffic",e,n,t);o(...E("client secret: "+u(m)));let l=await H(d,"s ap traffic",e,n,t);o(...E("server secret: "+u(l)));let g=await H(m,"key",new Uint8Array(0),r,t);o(...E("client application key: "+u(g)));let y=await H(l,"key",new Uint8Array(0),r,t);o(...E("server application key: "+u(y)));let S=await H(m,"iv",new Uint8Array(0),12,t);o(...E("client application iv: "+u(S)));let T=await H(l,"iv",new Uint8Array(0),12,t);return o(...E("server application iv: "+u(T))),{serverApplicationKey:y,serverApplicationIV:T,clientApplicationKey:g,clientApplicationIV:S}}var at=class{constructor(e,t,r){this.mode=e;this.key=t;this.initialIv=r}recordsProcessed=0n;priorPromise=Promise.resolve(new Uint8Array);async process(e,t,r){let n=this.processUnsequenced(e,t,r);return this.priorPromise=this.priorPromise.then(()=>n)}async processUnsequenced(e,t,r){let n=this.recordsProcessed;this.recordsProcessed+=1n;let a=this.initialIv.slice(),c=BigInt(a.length),s=c-1n;for(let g=0n;g<c;g++){let y=n>>(g<<3n);if(y===0n)break;a[Number(s-g)]^=Number(y&0xffn)}let h=t<<3,d={name:"AES-GCM",iv:a,tagLength:h,additionalData:r},m=await f[this.mode](d,this.key,e);return new Uint8Array(m)}};function Ct(i){return i>64&&i<91?i-65:i>96&&i<123?i-71:i>47&&i<58?i+4:i===43?62:i===47?63:i===61?64:void 0}function Xt(i){let e=i.length,t=0,r=0,n=64,a=64,c=64,s=64,h=new Uint8Array(e*.75);for(;t<e;)n=Ct(i.charCodeAt(t++)),a=Ct(i.charCodeAt(t++)),c=Ct(i.charCodeAt(t++)),s=Ct(i.charCodeAt(t++)),h[r++]=n<<2|a>>4,h[r++]=(a&15)<<4|c>>2,h[r++]=(c&3)<<6|s;let d=a===64?0:c===64?2:s===64?1:0;return h.subarray(0,r-d)}var tt=class extends b{readASN1Length(e){let t=this.readUint8();if(t<128)return this.comment(`${t} bytes${e?` of ${e}`:""} follow (ASN.1)`),t;let r=t&127,n=`% bytes${e?` of ${e}`:""} follow (ASN.1)`;if(r===1)return this.readUint8(n);if(r===2)return this.readUint16(n);if(r===3)return this.readUint24(n);if(r===4)return this.readUint32(n);throw new Error(`ASN.1 length fields are only supported up to 4 bytes (this one is ${r} bytes)`)}expectASN1Length(e){let t=this.readASN1Length(e);return this.expectLength(t)}readASN1OID(){let[e,t]=this.expectASN1Length("OID"),r=this.readUint8(),n=`${Math.floor(r/40)}.${r%40}`;for(;t()>0;){let a=0;for(;;){let c=this.readUint8();if(a<<=7,a+=c&127,c<128)break}n+=`.${a}`}return this.comment(n),e(),n}readASN1Boolean(){let[e,t]=this.expectASN1Length("boolean"),r=t();if(r!==1)throw new Error(`Boolean has weird length: ${r}`);let n=this.readUint8(),a;if(n===255)a=!0;else if(n===0)a=!1;else throw new Error(`Boolean has weird value: 0x${u([n])}`);return this.comment(a.toString()),e(),a}readASN1UTCTime(){let[e,t]=this.expectASN1Length("UTC time"),n=this.readUTF8String(t()).match(/^(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)Z$/);if(!n)throw new Error("Unrecognised ASN.1 UTC time format");let[,a,c,s,h,d,m]=n,l=parseInt(a,10),g=l+(l>=50?1900:2e3),y=new Date(`${g}-${c}-${s}T${h}:${d}:${m}Z`);return this.comment("= "+y.toISOString()),e(),y}readASN1BitString(){let[e,t]=this.expectASN1Length("bit string"),r=this.readUint8("right-padding bits"),n=t(),a=this.readBytes(n);if(r>7)throw new Error(`Invalid right pad value: ${r}`);if(r>0){let c=8-r;for(let s=n-1;s>0;s--)a[s]=255&a[s-1]<<c|a[s]>>>r;a[0]=a[0]>>>r}return e(),a}};function Tt(i,e=(r,n)=>n,t){return JSON.stringify(i,(n,a)=>e(n,typeof a!="object"||a===null||Array.isArray(a)?a:Object.fromEntries(Object.entries(a).sort(([c],[s])=>c<s?-1:c>s?1:0))),t)}var vt=1,yt=2,q=48,Ie=49,ot=6,Le=19,Re=12,qt=23,It=5,nt=4,Lt=3,_t=163,ct=128;var De={"2.5.4.6":"C","2.5.4.10":"O","2.5.4.11":"OU","2.5.4.3":"CN","2.5.4.7":"L","2.5.4.8":"ST","2.5.4.12":"T","2.5.4.42":"GN","2.5.4.43":"I","2.5.4.4":"SN","1.2.840.113549.1.9.1":"E-mail"},te={"1.2.840.10045.2.1":"ECPublicKey","1.2.840.10045.3.1.7":"secp256r1","1.3.132.0.34":"secp384r1","1.2.840.113549.1.1.1":"RSAES-PKCS1-v1_5"},ee={"2.5.29.15":"KeyUsage","2.5.29.37":"ExtKeyUsage","2.5.29.19":"BasicConstraints","2.5.29.14":"SubjectKeyIdentifier","2.5.29.35":"AuthorityKeyIdentifier","1.3.6.1.5.5.7.1.1":"AuthorityInfoAccess","2.5.29.17":"SubjectAltName","2.5.29.32":"CertificatePolicies","1.3.6.1.4.1.11129.2.4.2":"SignedCertificateTimestampList","2.5.29.31":"CRLDistributionPoints"},ne={"1.3.6.1.5.5.7.3.2":"TLSCLientAuth","1.3.6.1.5.5.7.3.1":"TLSServerAuth"};function re(i){let{length:e}=i;if(e>4)throw new Error(`Bit string length ${e} would overflow JS bit operators`);let t=0,r=0;for(let n=i.length-1;n>=0;n--)t|=i[n]<<r,r+=8;return t}function Ft(i,e){let t={};i.expectUint8(q,`sequence (${e})`);let[r,n]=i.expectASN1Length("sequence");for(;n()>0;){i.expectUint8(Ie,"set");let[a]=i.expectASN1Length("set");i.expectUint8(q,"sequence");let[c]=i.expectASN1Length("sequence");i.expectUint8(ot,"OID");let s=i.readASN1OID(),h=De[s]??s;i.comment(`= ${h}`);let d=i.readUint8();if(d===Le)i.comment("printable string");else if(d===Re)i.comment("UTF8 string");else throw new Error(`Unexpected item type in certificate ${e}: 0x${u([d])}`);let[m,l]=i.expectASN1Length("UTF8 string"),g=i.readUTF8String(l());if(m(),c(),a(),t[h]!==void 0)throw new Error(`Duplicate OID ${h} in certificate ${e}`);t[h]=g}return r(),t}function ie(i,e=0){let t=[],[r,n]=i.expectASN1Length("names sequence");for(;n()>0;){let a=i.readUint8("GeneralNames type"),[c,s]=i.expectASN1Length("name"),h;a===(e|2)?(h=i.readUTF8String(s()),i.comment("= DNS name")):(h=i.readBytes(s()),i.comment(`= name (type 0x${u([a])})`)),t.push({name:h,type:a}),c()}return r(),t}function Pt(i){let e={"1.2.840.113549.1.1.1":{name:"RSAES-PKCS1-v1_5"},"1.2.840.113549.1.1.5":{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-1"}},"1.2.840.113549.1.1.11":{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},"1.2.840.113549.1.1.12":{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-384"}},"1.2.840.113549.1.1.13":{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-512"}},"1.2.840.113549.1.1.10":{name:"RSA-PSS"},"1.2.840.113549.1.1.7":{name:"RSA-OAEP"},"1.2.840.10045.2.1":{name:"ECDSA",hash:{name:"SHA-1"}},"1.2.840.10045.4.1":{name:"ECDSA",hash:{name:"SHA-1"}},"1.2.840.10045.4.3.2":{name:"ECDSA",hash:{name:"SHA-256"}},"1.2.840.10045.4.3.3":{name:"ECDSA",hash:{name:"SHA-384"}},"1.2.840.10045.4.3.4":{name:"ECDSA",hash:{name:"SHA-512"}},"1.3.133.16.840.63.0.2":{name:"ECDH",kdf:"SHA-1"},"1.3.132.1.11.1":{name:"ECDH",kdf:"SHA-256"},"1.3.132.1.11.2":{name:"ECDH",kdf:"SHA-384"},"1.3.132.1.11.3":{name:"ECDH",kdf:"SHA-512"},"2.16.840.1.101.3.4.1.2":{name:"AES-CBC",length:128},"2.16.840.1.101.3.4.1.22":{name:"AES-CBC",length:192},"2.16.840.1.101.3.4.1.42":{name:"AES-CBC",length:256},"2.16.840.1.101.3.4.1.6":{name:"AES-GCM",length:128},"2.16.840.1.101.3.4.1.26":{name:"AES-GCM",length:192},"2.16.840.1.101.3.4.1.46":{name:"AES-GCM",length:256},"2.16.840.1.101.3.4.1.4":{name:"AES-CFB",length:128},"2.16.840.1.101.3.4.1.24":{name:"AES-CFB",length:192},"2.16.840.1.101.3.4.1.44":{name:"AES-CFB",length:256},"2.16.840.1.101.3.4.1.5":{name:"AES-KW",length:128},"2.16.840.1.101.3.4.1.25":{name:"AES-KW",length:192},"2.16.840.1.101.3.4.1.45":{name:"AES-KW",length:256},"1.2.840.113549.2.7":{name:"HMAC",hash:{name:"SHA-1"}},"1.2.840.113549.2.9":{name:"HMAC",hash:{name:"SHA-256"}},"1.2.840.113549.2.10":{name:"HMAC",hash:{name:"SHA-384"}},"1.2.840.113549.2.11":{name:"HMAC",hash:{name:"SHA-512"}},"1.2.840.113549.1.9.16.3.5":{name:"DH"},"1.3.14.3.2.26":{name:"SHA-1"},"2.16.840.1.101.3.4.2.1":{name:"SHA-256"},"2.16.840.1.101.3.4.2.2":{name:"SHA-384"},"2.16.840.1.101.3.4.2.3":{name:"SHA-512"},"1.2.840.113549.1.5.12":{name:"PBKDF2"},"1.2.840.10045.3.1.7":{name:"P-256"},"1.3.132.0.34":{name:"P-384"},"1.3.132.0.35":{name:"P-521"}}[i];if(e===void 0)throw new Error(`Unsupported algorithm identifier: ${i}`);return e}function se(i,e=[]){return Object.values(i).forEach(t=>{typeof t=="string"?e=[...e,t]:e=se(t,e)}),e}function Vt(i){return se(i).join(" / ")}var Ne=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"],J=class{serialNumber;algorithm;issuer;validityPeriod;subject;publicKey;signature;keyUsage;subjectAltNames;extKeyUsage;authorityKeyIdentifier;subjectKeyIdentifier;basicConstraints;signedData;static distinguishedNamesAreEqual(e,t){return Tt(e)===Tt(t)}static readableDN(e){return Object.entries(e).map(t=>t.join("=")).join(", ")}constructor(e){let t=e instanceof tt?e:new tt(e);t.expectUint8(q,"sequence (certificate)");let[r]=t.expectASN1Length("certificate sequence"),n=t.offset;t.expectUint8(q,"sequence (certificate info)");let[a]=t.expectASN1Length("certificate info");t.expectBytes([160,3,2,1,2],"certificate version v3"),t.expectUint8(yt,"integer");let[c,s]=t.expectASN1Length("serial number");this.serialNumber=t.subarray(s()),t.comment("serial number"),c(),t.expectUint8(q,"sequence (algorithm)");let[h,d]=t.expectASN1Length("algorithm sequence");t.expectUint8(ot,"OID"),this.algorithm=t.readASN1OID(),t.comment(`= ${Vt(Pt(this.algorithm))}`),d()>0&&(t.expectUint8(It,"null"),t.expectUint8(0,"null length")),h(),this.issuer=Ft(t,"issuer"),t.expectUint8(q,"sequence (validity)");let[m]=t.expectASN1Length("validity sequence");t.expectUint8(qt,"UTC time (not before)");let l=t.readASN1UTCTime();t.expectUint8(qt,"UTC time (not after)");let g=t.readASN1UTCTime();this.validityPeriod={notBefore:l,notAfter:g},m(),this.subject=Ft(t,"subject");let y=t.offset;t.expectUint8(q,"sequence (public key)");let[S]=t.expectASN1Length("public key sequence");t.expectUint8(q,"sequence (public key params)");let[T,A]=t.expectASN1Length("public key params sequence"),x=[];for(;A()>0;){let j=t.readUint8();if(j===ot){t.comment("OID");let Z=t.readASN1OID();x.push(Z),t.comment(`= ${te[Z]}`)}else j===It&&(t.comment("null"),t.expectUint8(0,"null length"))}T(),t.expectUint8(Lt,"bit string");let v=t.readASN1BitString();t.comment("public key"),this.publicKey={identifiers:x,data:v,all:t.data.subarray(y,t.offset)},S(),t.expectUint8(_t,"constructed context-specific type");let[F]=t.expectASN1Length();t.expectUint8(q,"sequence (extensions)");let[V,G]=t.expectASN1Length("extensions sequence");for(;G()>0;){t.expectUint8(q,"sequence");let[j,Z]=t.expectASN1Length();t.expectUint8(ot,"OID (extension type)");let D=t.readASN1OID();if(t.comment(`= ${ee[D]}`),D==="2.5.29.17"){t.expectUint8(nt,"octet string");let[K]=t.expectASN1Length("DER document");t.expectUint8(q,"sequence (names)");let k=ie(t,ct);this.subjectAltNames=k.filter(I=>I.type===(2|ct)).map(I=>I.name),K()}else if(D==="2.5.29.15"){t.expectUint8(vt,"boolean");let K=t.readASN1Boolean();t.comment("<- critical"),t.expectUint8(nt,"octet string");let[k]=t.expectASN1Length("DER document");t.expectUint8(Lt,"bit string");let I=t.readASN1BitString(),N=re(I),w=new Set(Ne.filter((L,W)=>N&1<<W));t.comment(`key usage: ${N} = ${[...w]}`),k(),this.keyUsage={critical:K,usages:w}}else if(D==="2.5.29.37"){this.extKeyUsage={},t.expectUint8(nt,"octet string");let[K]=t.expectASN1Length("DER document");t.expectUint8(q,"sequence");let[k,I]=t.expectASN1Length("key usage OIDs");for(;I()>0;){t.expectUint8(ot,"OID");let N=t.readASN1OID();N==="1.3.6.1.5.5.7.3.1"&&(this.extKeyUsage.serverTls=!0),N==="1.3.6.1.5.5.7.3.2"&&(this.extKeyUsage.clientTls=!0),t.comment(`= ${ne[N]}`)}k(),K()}else if(D==="2.5.29.35"){t.expectUint8(nt,"octet string");let[K]=t.expectASN1Length("DER document");t.expectUint8(q,"sequence");let[k,I]=t.expectASN1Length("sequence");for(;I()>0;){let N=t.readUint8();if(N===(ct|0)){t.comment("context-specific type: key identifier");let[w,L]=t.expectASN1Length("authority key identifier");this.authorityKeyIdentifier=t.readBytes(L()),t.comment("authority key identifier"),w()}else if(N===(ct|1)){t.comment("context-specific type: authority cert issuer");let[w,L]=t.expectASN1Length("authority cert issuer");t.skip(L(),"ignored"),w()}else if(N===(ct|2)){t.comment("context-specific type: authority cert serial number");let[w,L]=t.expectASN1Length("authority cert issuer or authority cert serial number");t.skip(L(),"ignored"),w()}else if(N===(ct|33)){t.comment("context-specific type: DirName");let[w,L]=t.expectASN1Length("DirName");t.skip(L(),"ignored"),console.log(t.commentedString()),w()}else throw new Error(`Unexpected data type ${N} in authorityKeyIdentifier certificate extension`)}k(),K()}else if(D==="2.5.29.14"){t.expectUint8(nt,"octet string");let[K]=t.expectASN1Length("DER document");t.expectUint8(nt,"octet string");let[k,I]=t.expectASN1Length("subject key identifier");this.subjectKeyIdentifier=t.readBytes(I()),t.comment("subject key identifier"),k(),K()}else if(D==="2.5.29.19"){let K,k=t.readUint8();if(k===vt&&(t.comment("boolean"),K=t.readASN1Boolean(),t.comment("= critical"),k=t.readUint8()),k!==nt)throw new Error("Unexpected type in certificate basic constraints");t.comment("octet string");let[I]=t.expectASN1Length("DER document");t.expectUint8(q,"sequence");let[N,w]=t.expectASN1Length(),L;w()>0&&(t.expectUint8(vt,"boolean"),L=t.readASN1Boolean());let W;if(w()>0){t.expectUint8(yt,"integer");let p=t.readASN1Length("max path length");if(W=p===1?t.readUint8():p===2?t.readUint16():p===3?t.readUint24():void 0,W===void 0)throw new Error("Too many bytes in max path length in certificate basicConstraints");t.comment("max path length")}N(),I(),this.basicConstraints={critical:K,ca:L,pathLength:W}}else t.skip(Z(),"ignored extension data");j()}V(),F(),a(),this.signedData=t.data.subarray(n,t.offset),t.expectUint8(q,"sequence (signature algorithm)");let[U,_]=t.expectASN1Length("signature algorithm sequence");t.expectUint8(ot,"OID");let $=t.readASN1OID();if(_()>0&&(t.expectUint8(It,"null"),t.expectUint8(0,"null length")),U(),$!==this.algorithm)throw new Error(`Certificate specifies different signature algorithms inside (${this.algorithm}) and out (${$})`);t.expectUint8(Lt,"bitstring (signature)"),this.signature=t.readASN1BitString(),t.comment("signature"),r()}static fromPEM(e){let t="[A-Z0-9 ]+",r=new RegExp(`-{5}BEGIN ${t}-{5}([a-zA-Z0-9=+\\/\\n\\r]+)-{5}END ${t}-{5}`,"g"),n=[],a=null;for(;a=r.exec(e);){let c=a[1].replace(/[\r\n]/g,""),s=Xt(c),h=new this(s);n.push(h)}return n}subjectAltNameMatchingHost(e){let t=/[.][^.]+[.][^.]+$/;return(this.subjectAltNames??[]).find(r=>{let n=r,a=e;if(t.test(e)&&t.test(n)&&n.startsWith("*.")&&(n=n.slice(1),a=a.slice(a.indexOf("."))),n===a)return!0})}isValidAtMoment(e=new Date){return e>=this.validityPeriod.notBefore&&e<=this.validityPeriod.notAfter}description(){return"subject: "+J.readableDN(this.subject)+(this.subjectAltNames?`
subject alt names: `+this.subjectAltNames.join(", "):"")+(this.subjectKeyIdentifier?`
subject key id: ${u(this.subjectKeyIdentifier," ")}`:"")+`
issuer: `+J.readableDN(this.issuer)+(this.authorityKeyIdentifier?`
authority key id: ${u(this.authorityKeyIdentifier," ")}`:"")+`
validity: `+this.validityPeriod.notBefore.toISOString()+" \u2013 "+this.validityPeriod.notAfter.toISOString()+` (${this.isValidAtMoment()?"currently valid":"not valid"})`+(this.keyUsage?`
key usage (${this.keyUsage.critical?"critical":"non-critical"}): `+[...this.keyUsage.usages].join(", "):"")+(this.extKeyUsage?`
extended key usage: TLS server \u2014\xA0${this.extKeyUsage.serverTls}, TLS client \u2014\xA0${this.extKeyUsage.clientTls}`:"")+(this.basicConstraints?`
basic constraints (${this.basicConstraints.critical?"critical":"non-critical"}): CA \u2014\xA0${this.basicConstraints.ca}, path length \u2014 ${this.basicConstraints.pathLength}`:"")+`
signature algorithm: `+Vt(Pt(this.algorithm))}toJSON(){return{serialNumber:[...this.serialNumber],algorithm:this.algorithm,issuer:this.issuer,validityPeriod:{notBefore:this.validityPeriod.notBefore.toISOString(),notAfter:this.validityPeriod.notAfter.toISOString()},subject:this.subject,publicKey:{identifiers:this.publicKey.identifiers,data:[...this.publicKey.data],all:[...this.publicKey.all]},signature:[...this.signature],keyUsage:{critical:this.keyUsage?.critical,usages:[...this.keyUsage?.usages??[]]},subjectAltNames:this.subjectAltNames,extKeyUsage:this.extKeyUsage,authorityKeyIdentifier:this.authorityKeyIdentifier&&[...this.authorityKeyIdentifier],subjectKeyIdentifier:this.subjectKeyIdentifier&&[...this.subjectKeyIdentifier],basicConstraints:this.basicConstraints,signedData:[...this.signedData]}}},rt=class extends J{};async function Rt(i,e,t,r,n){i.expectUint8(q,"sequence");let[a]=i.expectASN1Length("sequence");i.expectUint8(yt,"integer");let[c,s]=i.expectASN1Length("integer"),h=i.readBytes(s());i.comment("signature: r"),c(),i.expectUint8(yt,"integer");let[d,m]=i.expectASN1Length("integer"),l=i.readBytes(m());i.comment("signature: s"),d(),a();let g=(x,v)=>x.length>v?x.subarray(x.length-v):x.length<v?R(new Uint8Array(v-x.length),x):x,y=r==="P-256"?32:48,S=R(g(h,y),g(l,y)),T=await f.importKey("spki",e,{name:"ECDSA",namedCurve:r},!1,["verify"]);if(await f.verify({name:"ECDSA",hash:n},T,S,t)!==!0)throw new Error("ECDSA-SECP256R1-SHA256 certificate verify failed");o(`%c\u2713 ECDSA signature verified (curve ${r}, hash ${n})`,"color: #8c8;")}async function ae(i,e,t,r=!0,n=!0){o("%c%s",`color: ${"#c88"}`,"certificates received from host");for(let d of e)o(...E(d.description()));o("Now we have all the certificates, which are summarised above. First, we do some basic checks on the end-user certificate \u2014\xA0i.e. the one this server is presenting as its own ([source](https://github.com/jawj/subtls/blob/main/src/tls/verifyCerts.ts)):");let a=e[0],c=a.subjectAltNameMatchingHost(i);if(c===void 0)throw new Error(`No matching subjectAltName for ${i}`);if(o(`%c\u2713 matched host to subjectAltName "${c}"`,"color: #8c8;"),!a.isValidAtMoment())throw new Error("End-user certificate is not valid now");if(o("%c\u2713 end-user certificate is valid now","color: #8c8;"),r){if(!a.extKeyUsage?.serverTls)throw new Error("End-user certificate has no TLS server extKeyUsage");o("%c\u2713 end-user certificate has TLS server extKeyUsage","color: #8c8;")}o("Next, we verify the signature of each certificate using the public key of the next certificate in the chain. This carries on until we find a certificate we can verify using one of our own trusted root certificates (or until we reach the end of the chain and therefore fail):");let h=!1;o("%c%s",`color: ${"#c88"}`,"trusted root certificates");for(let d of t)o(...E(d.description()));for(let d=0,m=e.length;d<m;d++){let l=e[d],g=l.authorityKeyIdentifier,y;if(g===void 0?(y=t.find(A=>J.distinguishedNamesAreEqual(A.subject,l.issuer)),y&&o("matched certificates on subject/issuer distinguished name: %s",J.readableDN(y.subject))):(y=t.find(A=>A.subjectKeyIdentifier!==void 0&&X(A.subjectKeyIdentifier,g)),y&&o("matched certificates on key id: %s",u(g," "))),y===void 0&&(y=e[d+1]),y===void 0)throw new Error("Ran out of certificates before reaching trusted root");let S=y instanceof rt;if(y.isValidAtMoment()!==!0)throw new Error("Signing certificate is not valid now");if(n&&y.keyUsage?.usages.has("digitalSignature")!==!0)throw new Error("Signing certificate keyUsage does not include digital signatures");if(y.basicConstraints?.ca!==!0)throw new Error("Signing certificate basicConstraints do not indicate a CA certificate");let{pathLength:T}=y.basicConstraints;if(T!==void 0&&T<d)throw new Error("Exceeded certificate path length");if(o(`verifying certificate CN "${l.subject.CN}" is signed by %c${S?"trusted root":"intermediate"}%c certificate CN "${y.subject.CN}" ...`,`background: ${S?"#ffc":"#eee"}`,"background: inherit"),l.algorithm==="1.2.840.10045.4.3.2"||l.algorithm==="1.2.840.10045.4.3.3"){let A=l.algorithm==="1.2.840.10045.4.3.2"?"SHA-256":"SHA-384",x=y.publicKey.identifiers,v=x.includes("1.2.840.10045.3.1.7")?"P-256":x.includes("1.3.132.0.34")?"P-384":void 0;if(v===void 0)throw new Error("Unsupported signing key curve");let F=new tt(l.signature);await Rt(F,y.publicKey.all,l.signedData,v,A)}else if(l.algorithm==="1.2.840.113549.1.1.11"||l.algorithm==="1.2.840.113549.1.1.12"){let A=l.algorithm==="1.2.840.113549.1.1.11"?"SHA-256":"SHA-384",x=await f.importKey("spki",y.publicKey.all,{name:"RSASSA-PKCS1-v1_5",hash:A},!1,["verify"]);if(await f.verify({name:"RSASSA-PKCS1-v1_5"},x,l.signature,l.signedData)!==!0)throw new Error("RSASSA_PKCS1-v1_5-SHA256 certificate verify failed");o("%c\u2713 RSASAA-PKCS1-v1_5 signature verified","color: #8c8;")}else throw new Error("Unsupported signing algorithm");if(S){h=!0;break}}return h}var ke=new TextEncoder;async function oe(i,e,t,r,n,a=!0,c=!0){let s=new tt(await e());s.expectUint8(8,"handshake record type: encrypted extensions ([RFC8446 \xA74.3.1](https://datatracker.ietf.org/doc/html/rfc8446#section-4.3.1))");let[h]=s.expectLengthUint24(),[d,m]=s.expectLengthUint16("extensions");for(;m()>0;){let P=s.readUint16("extension type: ");if(P===0)s.comment("SNI"),s.expectUint16(0,"no extension data ([RFC6066 \xA73](https://datatracker.ietf.org/doc/html/rfc6066#section-3))");else if(P===10){s.comment("supported groups ([RFC8446 \xA74.2](https://www.rfc-editor.org/rfc/rfc8446#section-4.2))");let[z,Q]=s.expectLengthUint16("groups data");s.skip(Q(),"ignored"),z()}else throw new Error(`Unsupported server encrypted extension type 0x${u([P]).padStart(4,"0")}`)}d(),h(),s.remaining()===0&&s.extend(await e());let l=!1,g=s.readUint8();if(g===13){s.comment("handshake record type: certificate request ([RFC8446 \xA74.3.2](https://datatracker.ietf.org/doc/html/rfc8446#section-4.3.2))"),l=!0;let[P]=s.expectLengthUint24("certificate request data");s.expectUint8(0,"length of certificate request context");let[z,Q]=s.expectLengthUint16("certificate request extensions");s.skip(Q(),"certificate request extensions (ignored)"),z(),P(),s.remaining()===0&&s.extend(await e()),g=s.readUint8()}if(g!==11)throw new Error(`Unexpected handshake message type 0x${u([g])}`);s.comment("handshake record type: certificate ([RFC8446 \xA74.4.2](https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.2))");let[y]=s.expectLengthUint24("certificate payload");s.expectUint8(0,"0 bytes of request context follow");let[S,T]=s.expectLengthUint24("certificates"),A=[];for(;T()>0;){let[P]=s.expectLengthUint24("certificate"),z=new J(s);A.push(z),P();let[Q,ht]=s.expectLengthUint16(),M=s.subarray(ht());Q()}if(S(),y(),A.length===0)throw new Error("No certificates supplied");let x=A[0],v=s.data.subarray(0,s.offset),F=R(r,v),V=await f.digest("SHA-256",F),G=new Uint8Array(V),U=R(ke.encode(" ".repeat(64)+"TLS 1.3, server CertificateVerify"),[0],G);s.remaining()===0&&s.extend(await e()),s.expectUint8(15,"handshake message type: certificate verify ([RFC8446 \xA74.4.3](https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.3))");let[_]=s.expectLengthUint24("handshake message data"),$=s.readUint16();if(o("verifying end-user certificate ..."),$===1027){s.comment("signature type ECDSA-SECP256R1-SHA256");let[P]=s.expectLengthUint16();await Rt(s,x.publicKey.all,U,"P-256","SHA-256"),P()}else if($===2052){s.comment("signature type RSA-PSS-RSAE-SHA256");let[P,z]=s.expectLengthUint16(),Q=s.subarray(z());s.comment("signature"),P();let ht=await f.importKey("spki",x.publicKey.all,{name:"RSA-PSS",hash:"SHA-256"},!1,["verify"]);if(await f.verify({name:"RSA-PSS",saltLength:32},ht,Q,U)!==!0)throw new Error("RSA-PSS-RSAE-SHA256 certificate verify failed")}else throw new Error(`Unsupported certificate verify signature type 0x${u([$]).padStart(4,"0")}`);o("%c\u2713 end-user certificate verified (server has private key)","color: #8c8;"),_();let j=s.data.subarray(0,s.offset),Z=R(r,j),D=await H(t,"finished",new Uint8Array(0),32,256),K=await f.digest("SHA-256",Z),k=await f.importKey("raw",D,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),I=await f.sign("HMAC",k,K),N=new Uint8Array(I);s.remaining()===0&&s.extend(await e()),s.expectUint8(20,"handshake message type: finished ([RFC8446 \xA74.4.4](https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.4))");let[w,L]=s.expectLengthUint24("verify hash"),W=s.readBytes(L());if(s.comment("verify hash"),w(),s.remaining()!==0)throw new Error("Unexpected extra bytes in server handshake");if(X(W,N)!==!0)throw new Error("Invalid server verify hash");if(o("Decrypted using the server handshake key, the server\u2019s handshake messages are parsed as follows ([source](https://github.com/jawj/subtls/blob/main/src/tls/readEncryptedHandshake.ts)). This is a long section, since X.509 certificates are quite complex and there will be several of them:"),o(...C(s.commentedString(!0),"#88c")),!await ae(i,A,n,a,c))throw new Error("Validated certificate chain did not end in a trusted root");return[s.data,l]}async function ft(i,e,t,r,{useSNI:n,requireServerTlsExtKeyUsage:a,requireDigitalSigKeyUsage:c,writePreData:s,expectPreData:h,commentPreData:d}={}){n??=!0,a??=!0,c??=!0;let m=await f.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"]),l=await f.exportKey("raw",m.publicKey),g=new Uint8Array(32);crypto.getRandomValues(g);let y=Kt(i,l,g,n);o(...C(y.commentedString(),"#8cc"));let S=y.array(),T=s?R(s,S):S;if(r(T),o("The server returns a response, and we parse it ([source](https://github.com/jawj/subtls/blob/main/src/tls/parseServerHello.ts)):"),h){let B=await t(h.length);if(!B||!X(B,h))throw new Error("Pre data did not match expectation");o(...C(u(B)+"  "+d,"#88c"))}let A=await Ut(t,22);if(A===void 0)throw new Error("Connection closed while awaiting server hello");let x=new b(A.content),v=Mt(x,g);o(...C(A.header.commentedString()+x.commentedString(),"#88c"));let F=await Ut(t,20);if(F===void 0)throw new Error("Connection closed awaiting server cipher change");let V=new b(F.content),[G]=V.expectLength(1);V.expectUint8(1,"dummy ChangeCipherSpec payload (middlebox compatibility)"),G(),o("For the benefit of badly-written middleboxes that are following along expecting TLS 1.2, the server sends us a meaningless cipher change record:"),o(...C(F.header.commentedString()+V.commentedString(),"#88c")),o("Both sides of the exchange now have everything they need to calculate the keys and IVs that will protect the rest of the handshake:"),o("%c%s",`color: ${"#c88"}`,"handshake key computations ([source](https://github.com/jawj/subtls/blob/main/src/tls/keys.ts))");let U=S.subarray(5),_=A.content,$=R(U,_),j=await Jt(v,m.privateKey,$,256,16),Z=await f.importKey("raw",j.serverHandshakeKey,{name:"AES-GCM"},!1,["decrypt"]),D=new at("decrypt",Z,j.serverHandshakeIV),K=await f.importKey("raw",j.clientHandshakeKey,{name:"AES-GCM"},!1,["encrypt"]),k=new at("encrypt",K,j.clientHandshakeIV);o("The server continues by sending one or more encrypted records containing the rest of its handshake messages. These include the \u2018certificate verify\u2019 message, which we check on the spot, and the full certificate chain, which we verify a bit later on:");let I=async()=>{let B=await bt(t,D,22);if(B===void 0)throw new Error("Premature end of encrypted server handshake");return B},[N,w]=await oe(i,I,j.serverSecret,$,e,a,c);o("For the benefit of badly-written middleboxes that are following along expecting TLS 1.2, it\u2019s the client\u2019s turn to send a meaningless cipher change record:");let L=new b(6);L.writeUint8(20,"record type: ChangeCipherSpec"),L.writeUint16(771,"TLS version 1.2 (middlebox compatibility)");let W=L.writeLengthUint16();L.writeUint8(1,"dummy ChangeCipherSpec payload (middlebox compatibility)"),W(),o(...C(L.commentedString(),"#8cc"));let p=L.array(),et=new Uint8Array(0);if(w){let B=new b(8);B.writeUint8(11,"handshake message type: client certificate");let gt=B.writeLengthUint24("client certificate data");B.writeUint8(0,"certificate context: none"),B.writeUint24(0,"certificate list: empty"),gt(),et=B.array(),o("Since a client cert was requested, we\u2019re obliged to send a blank one. Here it is unencrypted:"),o(...C(B.commentedString(),"#8cc"))}o("Next, we send a \u2018handshake finished\u2019 message, which includes an HMAC of the handshake to date. This is how it looks before encryption:");let P=R($,N,et),z=await f.digest("SHA-256",P),Q=new Uint8Array(z),ht=await H(j.clientSecret,"finished",new Uint8Array(0),32,256),M=await f.importKey("raw",ht,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),O=await f.sign("HMAC",M,Q),it=new Uint8Array(O),Y=new b(36);Y.writeUint8(20,"handshake message type: finished");let st=Y.writeLengthUint24("handshake finished data");Y.writeBytes(it),Y.comment("verify data"),st();let lt=Y.array();o(...C(Y.commentedString(),"#8cc")),o("And here\u2019s the client certificate (if requested) and handshake finished messages encrypted with the client\u2019s handshake key and ready to go:");let wt=await Ot(R(et,lt),k,22),At=Q;if(et.length>0){let B=P.subarray(0,P.length-et.length),gt=await f.digest("SHA-256",B);At=new Uint8Array(gt)}o("Both parties now have what they need to calculate the keys and IVs that will protect the application data:"),o("%c%s",`color: ${"#c88"}`,"application key computations ([source](https://github.com/jawj/subtls/blob/main/src/tls/keys.ts))");let xt=await Zt(j.handshakeSecret,At,256,16),me=await f.importKey("raw",xt.clientApplicationKey,{name:"AES-GCM"},!0,["encrypt"]),ue=new at("encrypt",me,xt.clientApplicationIV),pe=await f.importKey("raw",xt.serverApplicationKey,{name:"AES-GCM"},!0,["decrypt"]),fe=new at("decrypt",pe,xt.serverApplicationIV),St=!1;return o("The TLS connection is established, and server and client can start exchanging encrypted application data."),[()=>{if(!St){let B=R(p,...wt);r(B),St=!0}return bt(t,fe)},async B=>{let gt=St;St=!0;let $t=await Ot(B,ue,23),we=gt?R(...$t):R(p,...wt,...$t);r(we)}]}var Dt=`-----BEGIN CERTIFICATE-----
MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw
TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu
ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY
MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc
h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+
0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U
A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW
T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH
B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC
B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv
KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn
OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn
jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw
qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI
rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq
hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL
ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ
3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK
NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5
ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur
TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC
jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc
oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq
4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA
mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d
emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
-----END CERTIFICATE-----
`;var Nt=`-----BEGIN CERTIFICATE-----
MIICGzCCAaGgAwIBAgIQQdKd0XLq7qeAwSxs6S+HUjAKBggqhkjOPQQDAzBPMQsw
CQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJuZXQgU2VjdXJpdHkgUmVzZWFyY2gg
R3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBYMjAeFw0yMDA5MDQwMDAwMDBaFw00
MDA5MTcxNjAwMDBaME8xCzAJBgNVBAYTAlVTMSkwJwYDVQQKEyBJbnRlcm5ldCBT
ZWN1cml0eSBSZXNlYXJjaCBHcm91cDEVMBMGA1UEAxMMSVNSRyBSb290IFgyMHYw
EAYHKoZIzj0CAQYFK4EEACIDYgAEzZvVn4CDCuwJSvMWSj5cz3es3mcFDR0HttwW
+1qLFNvicWDEukWVEYmO6gbf9yoWHKS5xcUy4APgHoIYOIvXRdgKam7mAHf7AlF9
ItgKbppbd9/w+kHsOdx1ymgHDB/qo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0T
AQH/BAUwAwEB/zAdBgNVHQ4EFgQUfEKWrt5LSDv6kviejM9ti6lyN5UwCgYIKoZI
zj0EAwMDaAAwZQIwe3lORlCEwkSHRhtFcP9Ymd70/aTSVaYgLXTWNLxBo1BfASdW
tL4ndQavEi51mI38AjEAi/V3bNTIZargCyzuFJ0nN6T5U6VR5CmD1/iQMVtCnwr1
/q4AaOeMSQ+2b1tbFfLn
-----END CERTIFICATE-----
`;async function ce(i,e){let t=Date.now(),r=Ke(i),n=r.hostname,a=/[.]neon[.]tech$/.test(n),c=!1,s=a,h=r.port||"5432",d=r.username,m=s?`project=${n.match(/^[^.]+/)[0]};${r.password}`:r.password,l=r.pathname.slice(1),g=!1,y=await e(n,h,()=>{if(!g)throw new Error("Unexpected connection close")}),S=new b(8),T=S.writeLengthUint32Incl("SSL request");S.writeUint32(80877103,"[SSLRequest](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-SSLREQUEST) code"),T(),o("First of all, we send a fixed 8-byte sequence that asks the Postgres server if SSL/TLS is available:"),o(...C(S.commentedString(),"#8cc"));let A=S.array();if(c)o("With Neon, we don\u2019t need to wait for the reply: we run this server, so we know it\u2019s going to answer yes. We thus save time by ploughing straight on with the TLS handshake, which begins with a \u2018client hello\u2019:");else{y.write(A);let M=await y.read(1);o('The server tells us if it can speak SSL/TLS ("S" for yes, "N" for no):');let O=new b(M);O.expectUint8(83,'"S" = SSL connection supported'),o(...C(O.commentedString(),"#88c")),o("We then start a TLS handshake, which begins with the \u2018client hello\u2019 ([source](https://github.com/jawj/subtls/blob/main/src/tls/makeClientHello.ts)):")}let x=new b(1);x.writeUTF8String("S");let v=x.array(),F=rt.fromPEM(Dt+Nt),[V,G]=c?await ft(n,F,y.read,y.write,{useSNI:!s,requireServerTlsExtKeyUsage:!1,requireDigitalSigKeyUsage:!1,writePreData:A,expectPreData:v,commentPreData:'"S" = SSL connection supported'}):await ft(n,F,y.read,y.write,{useSNI:!s,requireServerTlsExtKeyUsage:!1,requireDigitalSigKeyUsage:!1}),U=new b(1024),_=U.writeLengthUint32Incl("[StartupMessage](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-STARTUPMESSAGE)");U.writeUint32(196608,"protocol version"),U.writeUTF8StringNullTerminated("user"),U.writeUTF8StringNullTerminated(d),U.writeUTF8StringNullTerminated("database"),U.writeUTF8StringNullTerminated(l),U.writeUint8(0,"end of message"),_(),U.writeUTF8String("p"),U.comment("= [PasswordMessage](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-PASSWORDMESSAGE)");let $=U.writeLengthUint32Incl("password message");U.writeUTF8StringNullTerminated(m),$(),U.writeUTF8String("Q"),U.comment("= [Query](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-QUERY)");let j=U.writeLengthUint32Incl("query");U.writeUTF8StringNullTerminated("SELECT now()"),j(),o("So: we now resume our Postgres communications. Because we know what authentication scheme the server will offer, we can save several network round-trips and bundle up a Postgres startup message, a cleartext password message, and a simple query. Here\u2019s the pipelined plaintext:"),o(...C(U.commentedString(),"#8cc")),o("And the ciphertext looks like this:"),await G(U.array()),o("The server now responds to each message in turn. First it responds to the startup message with a request for our password. Encrypted, as received:");let Z=await V(),D=new b(Z);D.expectUint8("R".charCodeAt(0),'"R" = authentication request');let[K,k]=D.expectLengthUint32Incl("request"),I=D.readUint32();if(I===3)D.comment("request password auth ([AuthenticationCleartextPassword](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-AUTHENTICATIONCLEARTEXTPASSWORD))");else if(I===10){for(D.comment("request SASL auth");k()>1;){let M=D.readUTF8StringNullTerminated()}D.expectUint8(0,"null terminated list")}else throw new Error(`Unsupported auth mechanism (${I})`);if(K(),o("Decrypted and parsed:"),o(...C(D.commentedString(!0),"#88c")),I===10)throw o("We don\u2019t currently support anything except cleartext auth, so we come to an abrupt end here."),new Error("Unsupported SCRAM-SHA-256 auth");o("Next, it responds to the password we sent, and provides some other useful data. Encrypted, that\u2019s:");let N=await V(),w=new b(N);w.expectUint8("R".charCodeAt(0),'"R" = authentication request');let[L]=w.expectLengthUint32Incl("authentication result");for(w.expectUint32(0,"[AuthenticationOk](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-AUTHENTICATIONOK)"),L();w.remaining()>0;){let M=w.readUTF8String(1);if(M==="S"){w.comment("= [ParameterStatus](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-PARAMETERSTATUS)");let[O,it]=w.expectLengthUint32Incl("run-time parameters");for(;it()>0;){let Y=w.readUTF8StringNullTerminated(),st=w.readUTF8StringNullTerminated()}O()}else if(M==="K"){w.comment("= [BackendKeyData](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-BACKENDKEYDATA)");let[O]=w.expectLengthUint32Incl();w.readUint32("backend process ID"),w.readUint32("backend secret key"),O()}else if(M==="Z"){w.comment("= [ReadyForQuery](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-READYFORQUERY)");let[O]=w.expectLengthUint32Incl("status");w.expectUint8("I".charCodeAt(0),'"I" = status: idle'),O()}}o("Decrypted and parsed:"),o(...C(w.commentedString(!0),"#88c")),o("Lastly, it returns our query result. Encrypted:");let W=await V(),p=new b(W);p.expectUint8("T".charCodeAt(0),'"T" = [RowDescription](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-ROWDESCRIPTION)');let[et]=p.expectLengthUint32Incl(),P=p.readUint16("fields per row");for(let M=0;M<P;M++){let O=p.readUTF8StringNullTerminated();p.comment("= column name",p.offset-1);let it=p.readUint32("table OID"),Y=p.readUint16("column attribute number"),st=p.readUint32("data type OID"),lt=p.readUint16("data type size"),wt=p.readUint32("data type modifier"),At=p.readUint16("format code")}et();let z;for(;p.remaining()>0;){let M=p.readUTF8String(1);if(M==="D"){p.comment("= [DataRow](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-DATAROW)");let[O]=p.expectLengthUint32Incl(),it=p.readUint16("columns to follow");for(let Y=0;Y<it;Y++){let[st,lt]=p.expectLengthUint32();z=p.readUTF8String(lt()),p.comment("= column value"),st()}O()}else if(M==="C"){p.comment("= [Close](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-CLOSE)");let[O]=p.expectLengthUint32Incl();p.readUTF8StringNullTerminated(),p.comment("= command tag",p.offset-1),O()}else if(M==="Z"){p.comment("= [ReadyForQuery](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-READYFORQUERY)");let[O]=p.expectLengthUint32Incl();p.expectUint8("I".charCodeAt(0),'"I" = status: idle'),O()}else throw new Error(`Unexpected message type: ${M}`)}o("Decrypted and parsed:"),o(...C(p.commentedString(!0),"#88c")),o("We pick out our result \u2014\xA0the current time on our server:"),o("%c%s","font-size: 2em",z);let Q=new b(5);Q.writeUTF8String("X"),Q.comment("= [Terminate](https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-TERMINATE)"),Q.writeLengthUint32Incl()(),o("Last of all, we send a termination command. Before encryption, that\u2019s:"),o(...C(Q.commentedString(!0),"#8cc")),o("And as sent on the wire:"),await G(Q.array()),g=!0}function Ke(i,e=!1){let{protocol:t}=new URL(i),r="http:"+i.substring(t.length),{username:n,password:a,hostname:c,port:s,pathname:h,search:d,searchParams:m,hash:l}=new URL(r);a=decodeURIComponent(a);let g=n+":"+a,y=e?Object.fromEntries(m.entries()):d;return{href:i,protocol:t,auth:g,username:n,password:a,hostname:c,port:s,pathname:h,search:d,query:y,hash:l}}var he=`-----BEGIN CERTIFICATE-----\r
MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ\r
RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD\r
VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX\r
DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y\r
ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy\r
VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr\r
mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr\r
IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK\r
mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu\r
XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy\r
dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye\r
jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1\r
BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\r
DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92\r
9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx\r
jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0\r
Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz\r
ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS\r
R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp\r
-----END CERTIFICATE-----\r
`;var de=`-----BEGIN CERTIFICATE-----\r
MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\r
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\r
d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\r
QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\r
MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\r
b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\r
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\r
CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\r
nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\r
43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\r
T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\r
gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\r
BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\r
TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\r
DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\r
hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\r
06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\r
PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\r
YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\r
CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\r
-----END CERTIFICATE-----\r
`;var qe=new TextDecoder;async function ye(i,e,t){let r=Date.now(),n=new URL(i);if(n.protocol!=="https:")throw new Error("Wrong protocol");let a=n.hostname,c=n.port||443,s=n.pathname+n.search;o("We begin the TLS handshake by sending a client hello message ([source](https://github.com/jawj/subtls/blob/main/src/tls/makeClientHello.ts)):");let h=rt.fromPEM(Dt+Nt+he+de),d=await t(a,c),[m,l]=await ft(a,h,d.read,d.write);o("Here\u2019s a GET request:");let g=new b(1024);g.writeUTF8String(`${e} ${s} HTTP/1.0\r
Host: ${a}\r
\r
`),o(...C(g.commentedString(),"#8cc")),o("Which goes to the server encrypted like so:"),await l(g.array()),o("The server replies:");let y,S="";do if(y=await m(),y){let T=qe.decode(y);S+=T,o(T)}while(y);return S}var jt=class{queue;outstandingRequest;constructor(){this.queue=[]}enqueue(e){this.queue.push(e),this.dequeue()}dequeue(){if(this.outstandingRequest===void 0)return;let{resolve:e,bytes:t}=this.outstandingRequest,r=this.bytesInQueue();if(r<t&&this.socketIsNotClosed())return;if(t=Math.min(t,r),t===0)return e(void 0);this.outstandingRequest=void 0;let n=this.queue[0],a=n.length;if(a===t)return this.queue.shift(),e(n);if(a>t)return this.queue[0]=n.subarray(t),e(n.subarray(0,t));{let c=new Uint8Array(t),s=t,h=0;for(;s>0;){let d=this.queue[0],m=d.length;m<=s?(this.queue.shift(),c.set(d,h),h+=m,s-=m):(this.queue[0]=d.subarray(s),c.set(d.subarray(0,s),h),s-=s,h+=s)}return e(c)}}bytesInQueue(){return this.queue.reduce((e,t)=>e+t.length,0)}async read(e){if(this.outstandingRequest!==void 0)throw new Error("Can\u2019t read while already awaiting read");return new Promise(t=>{this.outstandingRequest={resolve:t,bytes:e},this.dequeue()})}},kt=class extends jt{constructor(t){super();this.socket=t;t.addEventListener("message",r=>this.enqueue(new Uint8Array(r.data))),t.addEventListener("close",()=>this.dequeue())}socketIsNotClosed(){let{socket:t}=this,{readyState:r}=t;return r<=1}};async function Bt(i,e,t=()=>{}){let r=await new Promise(s=>{let h=new WebSocket(`wss://ws.manipulexity.com/v1?address=${i}:${e}`);h.binaryType="arraybuffer",h.addEventListener("open",()=>s(h)),h.addEventListener("error",d=>{console.log("ws error:",d)}),h.addEventListener("close",()=>{console.log("connection closed"),t()})}),n=new kt(r),a=n.read.bind(n),c=r.send.bind(r);return{read:a,write:c}}var Qt=location.hash.slice(1),le=Qt&&Qt.startsWith("postgres"),ge=document.getElementById("go"),Fe=document.getElementById("heading");le&&(ge.value="Ask Postgres the time over TLS",Fe.textContent="Postgres + TLS, byte-by-byte, LIVE!");ge.addEventListener("click",()=>{le?ce(Qt,Bt):ye("https://subtls.pages.dev","GET",Bt)});
